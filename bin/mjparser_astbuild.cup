

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI,CONST, LPAREN, RPAREN, EQUAL,SEARCH,  RETURN, PLUS, COMMA, PRINT, VOID,  NEW, READ, CONTINUE, BREAK;
terminal Integer NUMBER;
terminal String IDENT;
terminal Character CHAR_CONST;
terminal Integer BOOL_CONST;
terminal VERTICALBAR, RSBRACE, GREATER, STAR,  EXCLAMATION, MINUS, PERCENT, LESS,DOT , FINDANY,   LSBRACE, AMPERSAND,SLASH;

nonterminal  DeclList DeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal Decl Decl;
nonterminal Assign Assign;
nonterminal FormPars FormPars;
nonterminal StmtList StmtList;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal Statement Statement;
nonterminal DesigList DesigList;
nonterminal Addop Addop;
nonterminal  ActPars ActPars;
nonterminal ActualParamList ActualParamList;
nonterminal Sign Sign;
nonterminal Matched Matched;
nonterminal Unmatched Unmatched;
nonterminal Mulop Mulop;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Assgnop Assgnop;
nonterminal FindStart FindStart;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Program;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodeTypeName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Obj SingleVarDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj SingleConstDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ConstDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj VarDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj VariablesDeclaration;
nonterminal rs.etf.pp1.symboltable.concepts.Obj VarDeclList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj SingleDesignator;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ArrName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Term;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor;
nonterminal rs.etf.pp1.symboltable.concepts.Struct FactorList;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr;
nonterminal rs.etf.pp1.symboltable.concepts.Struct SngTerm;

Program ::= (Program) PROG ProgName:P1 DeclList:D2 LBRACE:programLbrace MethodDeclList:M3 RBRACE {: RESULT=new Program(P1, D2, M3); RESULT.setLine(P1left); :};

ProgName ::= (ProgName) IDENT:ProgName {: RESULT=new ProgName(ProgName); RESULT.setLine(ProgNameleft); :};

DeclList ::= (DeclarationList) DeclList:D1  Decl:D2 {: RESULT=new DeclarationList(D1, D2); RESULT.setLine(D1left); :}
			|
			(NoDeclarationList) {: RESULT=new NoDeclarationList(); :} /* epsilon */
			;

Decl ::= (ConstantsDeclaration) CONST Type:constType ConstDecl:C1 SEMI {: RESULT=new ConstantsDeclaration(constType, C1); RESULT.setLine(constTypeleft); :}
			|
			(VariablesDeclarationMain ) VariablesDeclaration:V1 {: RESULT=new VariablesDeclarationMain(V1); RESULT.setLine(V1left); :}
			;
			
VarDeclList ::= (VariablesDecarationlList) VarDeclList:vdl  VariablesDeclaration:vd {: RESULT=new VariablesDecarationlList(vdl, vd); RESULT.setLine(vdlleft); :}
			|
			(NoVariablesDecarationlList) {: RESULT=new NoVariablesDecarationlList(); :} /* epsilon */
			;
			
VariablesDeclaration ::= (VariablesDeclaration) Type:varType VarDecl:V1 SEMI {: RESULT=new VariablesDeclaration(varType, V1); RESULT.setLine(varTypeleft); :};
			
Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

ConstDecl ::= (ConstDeclaration) ConstDecl:C1 COMMA SingleConstDecl:S2 {: RESULT=new ConstDeclaration(C1, S2); RESULT.setLine(C1left); :}
			|
			(SingleConstDeclaration) SingleConstDecl:S1 {: RESULT=new SingleConstDeclaration(S1); RESULT.setLine(S1left); :}
			;
				
SingleConstDecl ::= (CharDeclaration) IDENT:charName EQUAL CHAR_CONST:charValue {: RESULT=new CharDeclaration(charName, charValue); RESULT.setLine(charNameleft); :}
			|
			(NumDeclaration) IDENT:numName EQUAL NUMBER:numValue {: RESULT=new NumDeclaration(numName, numValue); RESULT.setLine(numNameleft); :}
			| 
			(BoolDeclaration) IDENT:boolName EQUAL BOOL_CONST:boolValue {: RESULT=new BoolDeclaration(boolName, boolValue); RESULT.setLine(boolNameleft); :}
			;

VarDecl ::= (VarDeclaration) VarDecl:V1 COMMA SingleVarDecl:S2 {: RESULT=new VarDeclaration(V1, S2); RESULT.setLine(V1left); :}
			|
			(SingleVarDeclaration) SingleVarDecl:S1 {: RESULT=new SingleVarDeclaration(S1); RESULT.setLine(S1left); :}
			;
				
SingleVarDecl ::= (VariableDeclaration) IDENT:varName {: RESULT=new VariableDeclaration(varName); RESULT.setLine(varNameleft); :} 
			|
			(ArrayVariableDeclaration) IDENT:arrayName LSBRACE RSBRACE {: RESULT=new ArrayVariableDeclaration(arrayName); RESULT.setLine(arrayNameleft); :};



MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
			|
			(NoMethodDeclarations) {: RESULT=new NoMethodDeclarations(); :} /* epsilon */
			;
			
MethodDecl ::= (MethodDecl) MethodeTypeName:M1 LPAREN FormPars:F2 RPAREN VarDeclList:V3 LBRACE StmtList:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, V3, S4); RESULT.setLine(M1left); :} ;
			
MethodeTypeName ::= (TypeName) Type:retType IDENT:methName {: RESULT=new TypeName(retType, methName); RESULT.setLine(retTypeleft); :}
			|
			(VoidName) VOID:voidType IDENT:VoidmethName {: RESULT=new VoidName(VoidmethName); RESULT.setLine(VoidmethNameleft); :}
			;

FormPars ::= (FormParamList) FormalParamList:F1 {: RESULT=new FormParamList(F1); RESULT.setLine(F1left); :}
		  |
		  (NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */
		  ;
		  
FormalParamList ::= (FormalParamDeclaration) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDeclaration(F1, F2); RESULT.setLine(F1left); :}
			|
			(SingleFormalParamDeclaration) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDeclaration(F1); RESULT.setLine(F1left); :}
			;

FormalParamDecl ::= (VariableParam) Type:T1 IDENT:varName {: RESULT=new VariableParam(T1, varName); RESULT.setLine(T1left); :}
			|
			(ArrayParam) Type:T1 IDENT:ArrayName LSBRACE RSBRACE {: RESULT=new ArrayParam(T1, ArrayName); RESULT.setLine(T1left); :};
		
StmtList ::= (StatementList) StmtList:S1 Statement:S2 {: RESULT=new StatementList(S1, S2); RESULT.setLine(S1left); :}
			|
			(NoStatementList) {: RESULT=new NoStatementList(); :} /* epsilon */
			;
				
Statement ::= (FindAnyStatement) Assign:assign EQUAL Designator:d2 DOT SEARCH LPAREN Expr:E1 RPAREN SEMI {: RESULT=new FindAnyStatement(assign, d2, E1); RESULT.setLine(assignleft); :}
		   |
		   (DesignatorStmt) DesignatorStatement:D1 SEMI {: RESULT=new DesignatorStmt(D1); RESULT.setLine(D1left); :}
		   |
		   (PrintStmt) PRINT LPAREN Expr:printExpr RPAREN SEMI {: RESULT=new PrintStmt(printExpr); RESULT.setLine(printExprleft); :}
		   |
		   (PrintStmtNumConst) PRINT LPAREN Expr:printNumExpr COMMA NUMBER:N1 RPAREN SEMI {: RESULT=new PrintStmtNumConst(printNumExpr, N1); RESULT.setLine(printNumExprleft); :}
		   |
		   (ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
		   |
		    (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorStmt(); :}
		   ;
		      
		  

		   
DesignatorStatement ::= (Assignment)  Assign:assign EQUAL Expr:e {: RESULT=new Assignment(assign, e); RESULT.setLine(assignleft); :} 
					|
					(Increment) Designator:dgs PLUS PLUS {: RESULT=new Increment(dgs); RESULT.setLine(dgsleft); :} 
					|
					(Decrement) Designator:dsg MINUS MINUS {: RESULT=new Decrement(dsg); RESULT.setLine(dsgleft); :} 
					;
				
Assign ::= (Assign) Designator:desg {: RESULT=new Assign(desg); RESULT.setLine(desgleft); :} ;

			
Expr ::= (AddExpr) Expr:te Addop:A1 SngTerm:sngt {: RESULT=new AddExpr(te, A1, sngt); RESULT.setLine(teleft); :}
		|
		(SingleTerm) SngTerm:st {: RESULT=new SingleTerm(st); RESULT.setLine(stleft); :}
		;
		
SngTerm ::=(PositiveSingleTerm) Term:t {: RESULT=new PositiveSingleTerm(t); RESULT.setLine(tleft); :}
		|
		(MinusTermExpr) MINUS Term:t {: RESULT=new MinusTermExpr(t); RESULT.setLine(tleft); :}
		;

Term ::= (TermFactorList) FactorList:factorList {: RESULT=new TermFactorList(factorList); RESULT.setLine(factorListleft); :};

FactorList ::= (MulOpFactorList) FactorList:factorList Mulop:M1 Factor:factor {: RESULT=new MulOpFactorList(factorList, M1, factor); RESULT.setLine(factorListleft); :}
			   |
			   (SingleFactor) Factor:signleFactor {: RESULT=new SingleFactor(signleFactor); RESULT.setLine(signleFactorleft); :}
			   ;

Factor ::= (NumConst) NUMBER:N1 {: RESULT=new NumConst(N1); RESULT.setLine(N1left); :}
		|
		(CharConst) CHAR_CONST:C1 {: RESULT=new CharConst(C1); RESULT.setLine(C1left); :}
		| 
		(DesignatorFactor) Designator:dsg {: RESULT=new DesignatorFactor(dsg); RESULT.setLine(dsgleft); :}
		|
		(BoolConst) BOOL_CONST:B1 {: RESULT=new BoolConst(B1); RESULT.setLine(B1left); :}
		|
		(ParenFactor)LPAREN Expr:parenExpr RPAREN {: RESULT=new ParenFactor(parenExpr); RESULT.setLine(parenExprleft); :}
		|
		(ArrayAlocation) NEW Type:t LSBRACE  Expr:e  RSBRACE {: RESULT=new ArrayAlocation(t, e); RESULT.setLine(tleft); :}
		;	

				
Designator ::= (Designator) SingleDesignator:sd {: RESULT=new Designator(sd); RESULT.setLine(sdleft); :};



SingleDesignator ::=(DesignatorType) IDENT:name {: RESULT=new DesignatorType(name); RESULT.setLine(nameleft); :}
			|
			(DesignatorArray) ArrName:an LSBRACE Expr:e RSBRACE {: RESULT=new DesignatorArray(an, e); RESULT.setLine(anleft); :}
			;
			
ArrName ::=(ArrayName) IDENT:i {: RESULT=new ArrayName(i); RESULT.setLine(ileft); :};
			

Addop ::= (Addoperation) PLUS {: RESULT=new Addoperation(); :}
		| 
		(Subop) MINUS {: RESULT=new Subop(); :}
		;
		
Mulop ::= (Muloper) STAR {: RESULT=new Muloper(); :}
		|
		(Divop) SLASH {: RESULT=new Divop(); :}
		|
		(Modop) PERCENT {: RESULT=new Modop(); :}
		;

Assgnop ::= (Equal) EQUAL {: RESULT=new Equal(); :};

		
		
		
		
		

